//
//  Lungs.swift
//  Uvex
//
//  Created by Emil Shirima on 8/29/16.
//  Copyright Â© 2016 Alphamicron Inc. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class Lungs: NSObject
{
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawSlice1(frame frame: CGRect = CGRect(x: 0, y: 0, width: 220, height: 159), resizing: ResizingBehavior = .AspectFit)
    {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Background Color
        UIColor.whiteColor().setFill()
        CGContextFillRect(context, CGContextGetClipBoundingBox(context))
        
        /// Resize To Frame
        CGContextSaveGState(context)
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 220, height: 159), target: frame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        let resizedScale = CGSize(width: resizedFrame.width / 220, height: resizedFrame.height / 159)
        CGContextScaleCTM(context, resizedScale.width, resizedScale.height)
        CGContextTranslateCTM(context, -207, 200)
        
        /// Lungs_Icon
        let lungs_Icon = UIBezierPath()
        lungs_Icon.moveToPoint(CGPoint(x: 0, y: 95.33))
        lungs_Icon.addLineToPoint(CGPoint(x: 0, y: 125.05))
        lungs_Icon.addCurveToPoint(CGPoint(x: 6.17, y: 144.02), controlPoint1: CGPoint(x: 1.22, y: 127.6), controlPoint2: CGPoint(x: 1.61, y: 136.12))
        lungs_Icon.addCurveToPoint(CGPoint(x: 58.02, y: 147.07), controlPoint1: CGPoint(x: 18.73, y: 165.79), controlPoint2: CGPoint(x: 42.24, y: 158.32))
        lungs_Icon.addCurveToPoint(CGPoint(x: 82.64, y: 120.94), controlPoint1: CGPoint(x: 67.06, y: 140.62), controlPoint2: CGPoint(x: 76.47, y: 131.56))
        lungs_Icon.addCurveToPoint(CGPoint(x: 92.6, y: 81.45), controlPoint1: CGPoint(x: 87.48, y: 112.6), controlPoint2: CGPoint(x: 94.86, y: 93.18))
        lungs_Icon.addCurveToPoint(CGPoint(x: 75.38, y: 91.28), controlPoint1: CGPoint(x: 86.65, y: 83.62), controlPoint2: CGPoint(x: 79.92, y: 87.07))
        lungs_Icon.addCurveToPoint(CGPoint(x: 66.25, y: 93.82), controlPoint1: CGPoint(x: 73.71, y: 92.83), controlPoint2: CGPoint(x: 70.01, y: 98))
        lungs_Icon.addCurveToPoint(CGPoint(x: 76.84, y: 79.42), controlPoint1: CGPoint(x: 61.67, y: 88.71), controlPoint2: CGPoint(x: 72.89, y: 81.93))
        lungs_Icon.addCurveToPoint(CGPoint(x: 107.93, y: 69.97), controlPoint1: CGPoint(x: 85.97, y: 73.63), controlPoint2: CGPoint(x: 96.45, y: 70.34))
        lungs_Icon.addCurveToPoint(CGPoint(x: 131.52, y: 74), controlPoint1: CGPoint(x: 116.31, y: 69.7), controlPoint2: CGPoint(x: 124.35, y: 71.3))
        lungs_Icon.addCurveToPoint(CGPoint(x: 148.63, y: 83.86), controlPoint1: CGPoint(x: 139.09, y: 76.84), controlPoint2: CGPoint(x: 143.14, y: 79.79))
        lungs_Icon.addCurveToPoint(CGPoint(x: 151.85, y: 92.55), controlPoint1: CGPoint(x: 150.65, y: 85.35), controlPoint2: CGPoint(x: 155.37, y: 88.82))
        lungs_Icon.addCurveToPoint(CGPoint(x: 125.36, y: 81.21), controlPoint1: CGPoint(x: 146.34, y: 98.39), controlPoint2: CGPoint(x: 141.36, y: 84.46))
        lungs_Icon.addCurveToPoint(CGPoint(x: 157.98, y: 145.5), controlPoint1: CGPoint(x: 125.36, y: 113.63), controlPoint2: CGPoint(x: 140.97, y: 132.22))
        lungs_Icon.addCurveToPoint(CGPoint(x: 216.6, y: 132.04), controlPoint1: CGPoint(x: 181.12, y: 163.55), controlPoint2: CGPoint(x: 208.71, y: 164.48))
        lungs_Icon.addCurveToPoint(CGPoint(x: 205.26, y: 52.31), controlPoint1: CGPoint(x: 223.02, y: 105.61), controlPoint2: CGPoint(x: 215.67, y: 73.76))
        lungs_Icon.addCurveToPoint(CGPoint(x: 187.36, y: 22.08), controlPoint1: CGPoint(x: 199.51, y: 40.48), controlPoint2: CGPoint(x: 194.3, y: 31.72))
        lungs_Icon.addLineToPoint(CGPoint(x: 176.36, y: 8.72))
        lungs_Icon.addCurveToPoint(CGPoint(x: 161.42, y: 0.12), controlPoint1: CGPoint(x: 173.07, y: 5.22), controlPoint2: CGPoint(x: 168.07, y: 1.69))
        lungs_Icon.addCurveToPoint(CGPoint(x: 148.07, y: 3.4), controlPoint1: CGPoint(x: 155.28, y: -0.19), controlPoint2: CGPoint(x: 152.17, y: 0.72))
        lungs_Icon.addCurveToPoint(CGPoint(x: 130.06, y: 31.53), controlPoint1: CGPoint(x: 139.5, y: 9.01), controlPoint2: CGPoint(x: 132.86, y: 21.22))
        lungs_Icon.addCurveToPoint(CGPoint(x: 131.79, y: 43.78), controlPoint1: CGPoint(x: 128.47, y: 37.39), controlPoint2: CGPoint(x: 128.91, y: 38.94))
        lungs_Icon.addCurveToPoint(CGPoint(x: 161.44, y: 60.4), controlPoint1: CGPoint(x: 138.52, y: 55.07), controlPoint2: CGPoint(x: 147.42, y: 58.92))
        lungs_Icon.addCurveToPoint(CGPoint(x: 162.86, y: 68.91), controlPoint1: CGPoint(x: 167.74, y: 61.06), controlPoint2: CGPoint(x: 167.33, y: 67.86))
        lungs_Icon.addCurveToPoint(CGPoint(x: 129.73, y: 55.61), controlPoint1: CGPoint(x: 153.77, y: 71.05), controlPoint2: CGPoint(x: 136.51, y: 63.2))
        lungs_Icon.addCurveToPoint(CGPoint(x: 118.67, y: 5.59), controlPoint1: CGPoint(x: 116.25, y: 40.5), controlPoint2: CGPoint(x: 118.67, y: 29.04))
        lungs_Icon.addLineToPoint(CGPoint(x: 99.75, y: 5.59))
        lungs_Icon.addCurveToPoint(CGPoint(x: 88.56, y: 55.49), controlPoint1: CGPoint(x: 99.75, y: 29.3), controlPoint2: CGPoint(x: 102.05, y: 40.25))
        lungs_Icon.addCurveToPoint(CGPoint(x: 69.09, y: 66.97), controlPoint1: CGPoint(x: 84.82, y: 59.72), controlPoint2: CGPoint(x: 76.84, y: 64.74))
        lungs_Icon.addCurveToPoint(CGPoint(x: 56.51, y: 60.05), controlPoint1: CGPoint(x: 47.46, y: 73.2), controlPoint2: CGPoint(x: 50.55, y: 60.83))
        lungs_Icon.addCurveToPoint(CGPoint(x: 79.39, y: 51.94), controlPoint1: CGPoint(x: 68.83, y: 58.43), controlPoint2: CGPoint(x: 71.02, y: 58.23))
        lungs_Icon.addCurveToPoint(CGPoint(x: 86.5, y: 43.66), controlPoint1: CGPoint(x: 81.9, y: 50.05), controlPoint2: CGPoint(x: 84.52, y: 46.94))
        lungs_Icon.addCurveToPoint(CGPoint(x: 88.27, y: 32.09), controlPoint1: CGPoint(x: 89.29, y: 39.08), controlPoint2: CGPoint(x: 89.8, y: 37.73))
        lungs_Icon.addCurveToPoint(CGPoint(x: 59.52, y: 0), controlPoint1: CGPoint(x: 84.6, y: 18.56), controlPoint2: CGPoint(x: 74.42, y: 0.04))
        lungs_Icon.addCurveToPoint(CGPoint(x: 45.17, y: 5.86), controlPoint1: CGPoint(x: 53.2, y: 0.32), controlPoint2: CGPoint(x: 48.42, y: 2.91))
        lungs_Icon.addCurveToPoint(CGPoint(x: 3.14, y: 79.86), controlPoint1: CGPoint(x: 25.93, y: 23.31), controlPoint2: CGPoint(x: 9.58, y: 54.38))
        lungs_Icon.addCurveToPoint(CGPoint(x: 0, y: 95.33), controlPoint1: CGPoint(x: 2.32, y: 83.13), controlPoint2: CGPoint(x: 0.83, y: 93.44))
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 207, -200)
        lungs_Icon.usesEvenOddFillRule = true
        UIColor(hue: 0.546, saturation: 1, brightness: 0.934, alpha: 1).setFill()
        lungs_Icon.fill()
        CGContextRestoreGState(context)
        
        CGContextRestoreGState(context)
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfSlice1(size size: CGSize = CGSize(width: 220, height: 159), resizing: ResizingBehavior = .AspectFit) -> UIImage
    {
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        Lungs.drawSlice1(frame: CGRect(origin: CGPoint.zero, size: size), resizing: resizing)
        image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior
    {
        case AspectFit /// The content is proportionally resized to fit into the target rectangle.
        case AspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case Stretch /// The content is stretched to match the entire target rectangle.
        case Center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect rect: CGRect, target: CGRect) -> CGRect
        {
            if rect == target || target == CGRect.zero
            {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self
            {
            case .AspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .AspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .Stretch:
                break
            case .Center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
